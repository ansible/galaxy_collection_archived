- name: Ensure Pulp is up and healthy
  pulp.squeezer.status:
    pulp_url: "http://{{ pulp_api_host }}:{{ pulp_api_port }}"
    username: "{{ pulp_admin_username }}"
    password: "{{ pulp_default_admin_password }}"
  register: result
  ignore_errors: yes
  until: >
    result.status is defined and
    result.status.database_connection.connected == true and
    result.status.redis_connection.connected == true and
    result.status.online_workers | map(attribute='name') | select('match', '^resource-manager$') | list | count > 0 and
    result.status.online_workers | map(attribute='name') | select('match', '^[0-9]+@.*$') | list | count > 0
  delay: 2
  retries: 60

- name: Create default repositories
  pulp.squeezer.ansible_repository:
    pulp_url: "http://{{ pulp_api_host }}:{{ pulp_api_port }}"
    username: "{{ pulp_admin_username }}"
    password: "{{ pulp_default_admin_password }}"
    name: "{{ item.repo_name }}"
    description: "{{ item.description }}"
    state: present
  loop: "{{ pulp_ansible_repositories }}"

- name: Create default distributions
  pulp.squeezer.ansible_distribution:
    pulp_url: "http://{{ pulp_api_host }}:{{ pulp_api_port }}"
    username: "{{ pulp_admin_username }}"
    password: "{{ pulp_default_admin_password }}"
    name: "{{ item.dist_name }}"
    base_path: "{{ item.base_path }}"
    repository: "{{ item.repo_name }}"
    state: present
  loop: "{{ pulp_ansible_repositories }}"

- name: Create admins group and assign to the admin user
  command: '{{ pulp_install_dir }}/bin/pulpcore-manager create-group admins --users {{ pulp_admin_username }}'
  no_log: true
  become: true
  become_user: '{{ pulp_user }}'
  environment:
    PULP_SETTINGS: "{{ pulp_settings_file }}"

- name: Assign permissions to the admins group
  command: '{{ pulp_install_dir }}/bin/pulpcore-manager assign-permission admins {{ item }}'
  become: true
  become_user: '{{ pulp_user }}'
  environment:
    PULP_SETTINGS: "{{ pulp_settings_file }}"
  loop: "{{ pulp_galaxy_permissions }}"

- name: Copy default community requirements.yml
  copy:
    src: '{{ role_path }}/files/requirements.yml'
    dest: '{{ pulp_install_dir }}/requirements.yml'
    mode: '0660'
  become: true
  become_user: '{{ pulp_user }}'

- name: Configure Community remote
  command: >
    {{ pulp_install_dir }}/bin/pulpcore-manager
     create-remote
     community
     https://galaxy.ansible.com/api/v2/collections
     -r {{ pulp_install_dir }}/requirements.yml
     --distribution community
     --repository community
  become: true
  become_user: '{{ pulp_user }}'
  environment:
    PULP_SETTINGS: "{{ pulp_settings_file }}"

- name: Configure RH Certified remote
  command: >
    {{ pulp_install_dir }}/bin/pulpcore-manager
     create-remote
     rh-certified
     https://cloud.redhat.com/api/automation-hub/v3/collections
     --auth_url https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
     --distribution 'red-hat-certified'
     --repository rh-certified
  become: true
  become_user: '{{ pulp_user }}'
  environment:
    PULP_SETTINGS: "{{ pulp_settings_file }}"

- name: Ensure tar is available for galaxy-importer
  package:
    name: tar
    state: present
  become: true
